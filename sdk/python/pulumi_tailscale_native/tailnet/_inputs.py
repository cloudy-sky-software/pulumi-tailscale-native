# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AclRuleArgs',
    'CreateKeyArgs',
    'DeviceKeyCapabilitiesArgs',
    'KeyCapabilitiesArgs',
    'NodeAttrsArgs',
    'SshRuleArgs',
]

@pulumi.input_type
class AclRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['AclRuleAction'],
                 ports: pulumi.Input[Sequence[pulumi.Input[str]]],
                 users: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input['AclRuleAction'] action: Tailscale ACL rules are "default deny".
               So the only possible value for an ACL
               rule is `accept`.
        """
        AclRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            ports=ports,
            users=users,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['AclRuleAction'],
             ports: pulumi.Input[Sequence[pulumi.Input[str]]],
             users: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("ports", ports)
        _setter("users", users)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['AclRuleAction']:
        """
        Tailscale ACL rules are "default deny".
        So the only possible value for an ACL
        rule is `accept`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['AclRuleAction']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def users(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class CreateKeyArgs:
    def __init__(__self__, *,
                 ephemeral: pulumi.Input[bool],
                 preauthorized: pulumi.Input[bool],
                 reusable: pulumi.Input[bool],
                 tags: pulumi.Input[Sequence[pulumi.Input[str]]]):
        CreateKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ephemeral=ephemeral,
            preauthorized=preauthorized,
            reusable=reusable,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ephemeral: pulumi.Input[bool],
             preauthorized: pulumi.Input[bool],
             reusable: pulumi.Input[bool],
             tags: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("ephemeral", ephemeral)
        _setter("preauthorized", preauthorized)
        _setter("reusable", reusable)
        _setter("tags", tags)

    @property
    @pulumi.getter
    def ephemeral(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "ephemeral")

    @ephemeral.setter
    def ephemeral(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ephemeral", value)

    @property
    @pulumi.getter
    def preauthorized(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "preauthorized")

    @preauthorized.setter
    def preauthorized(self, value: pulumi.Input[bool]):
        pulumi.set(self, "preauthorized", value)

    @property
    @pulumi.getter
    def reusable(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "reusable")

    @reusable.setter
    def reusable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "reusable", value)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class DeviceKeyCapabilitiesArgs:
    def __init__(__self__, *,
                 create: pulumi.Input['CreateKeyArgs']):
        DeviceKeyCapabilitiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create=create,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create: pulumi.Input['CreateKeyArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("create", create)

    @property
    @pulumi.getter
    def create(self) -> pulumi.Input['CreateKeyArgs']:
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: pulumi.Input['CreateKeyArgs']):
        pulumi.set(self, "create", value)


@pulumi.input_type
class KeyCapabilitiesArgs:
    def __init__(__self__, *,
                 devices: pulumi.Input['DeviceKeyCapabilitiesArgs']):
        KeyCapabilitiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            devices=devices,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             devices: pulumi.Input['DeviceKeyCapabilitiesArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("devices", devices)

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Input['DeviceKeyCapabilitiesArgs']:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: pulumi.Input['DeviceKeyCapabilitiesArgs']):
        pulumi.set(self, "devices", value)


@pulumi.input_type
class NodeAttrsArgs:
    def __init__(__self__, *,
                 attr: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[Sequence[pulumi.Input[str]]]):
        NodeAttrsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attr=attr,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attr: pulumi.Input[Sequence[pulumi.Input[str]]],
             target: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attr", attr)
        _setter("target", target)

    @property
    @pulumi.getter
    def attr(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "attr")

    @attr.setter
    def attr(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "attr", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class SshRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['SshRuleAction'],
                 check_period: pulumi.Input[str],
                 dst: pulumi.Input[Sequence[pulumi.Input[str]]],
                 src: pulumi.Input[Sequence[pulumi.Input[str]]],
                 users: pulumi.Input[Sequence[pulumi.Input[str]]]):
        SshRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            check_period=check_period,
            dst=dst,
            src=src,
            users=users,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['SshRuleAction'],
             check_period: pulumi.Input[str],
             dst: pulumi.Input[Sequence[pulumi.Input[str]]],
             src: pulumi.Input[Sequence[pulumi.Input[str]]],
             users: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("check_period", check_period)
        _setter("dst", dst)
        _setter("src", src)
        _setter("users", users)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['SshRuleAction']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['SshRuleAction']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="checkPeriod")
    def check_period(self) -> pulumi.Input[str]:
        return pulumi.get(self, "check_period")

    @check_period.setter
    def check_period(self, value: pulumi.Input[str]):
        pulumi.set(self, "check_period", value)

    @property
    @pulumi.getter
    def dst(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def src(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter
    def users(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "users", value)


