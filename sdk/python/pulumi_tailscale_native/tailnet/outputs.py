# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'Acl',
    'AclRule',
    'AuthKey',
    'ClientConnectivity',
    'ClientSupports',
    'CreateKey',
    'Device',
    'DeviceKeyCapabilities',
    'DnsSearchPaths',
    'KeyCapabilities',
    'ListDevicesProperties',
    'NameServers',
    'NameServersPreference',
    'NodeAttrs',
    'SshRule',
]

@pulumi.output_type
class Acl(dict):
    def __init__(__self__, *,
                 acls: Sequence['outputs.AclRule'],
                 auto_approvers: Any,
                 groups: Any,
                 hosts: Any,
                 node_attrs: Sequence['outputs.NodeAttrs'],
                 ssh: Sequence['outputs.SshRule'],
                 tag_owners: Any,
                 tests: str):
        Acl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acls=acls,
            auto_approvers=auto_approvers,
            groups=groups,
            hosts=hosts,
            node_attrs=node_attrs,
            ssh=ssh,
            tag_owners=tag_owners,
            tests=tests,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acls: Sequence['outputs.AclRule'],
             auto_approvers: Any,
             groups: Any,
             hosts: Any,
             node_attrs: Sequence['outputs.NodeAttrs'],
             ssh: Sequence['outputs.SshRule'],
             tag_owners: Any,
             tests: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("acls", acls)
        _setter("auto_approvers", auto_approvers)
        _setter("groups", groups)
        _setter("hosts", hosts)
        _setter("node_attrs", node_attrs)
        _setter("ssh", ssh)
        _setter("tag_owners", tag_owners)
        _setter("tests", tests)

    @property
    @pulumi.getter
    def acls(self) -> Sequence['outputs.AclRule']:
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter(name="autoApprovers")
    def auto_approvers(self) -> Any:
        return pulumi.get(self, "auto_approvers")

    @property
    @pulumi.getter
    def groups(self) -> Any:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def hosts(self) -> Any:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="nodeAttrs")
    def node_attrs(self) -> Sequence['outputs.NodeAttrs']:
        return pulumi.get(self, "node_attrs")

    @property
    @pulumi.getter
    def ssh(self) -> Sequence['outputs.SshRule']:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter(name="tagOwners")
    def tag_owners(self) -> Any:
        return pulumi.get(self, "tag_owners")

    @property
    @pulumi.getter
    def tests(self) -> str:
        return pulumi.get(self, "tests")


@pulumi.output_type
class AclRule(dict):
    def __init__(__self__, *,
                 action: 'AclRuleAction',
                 ports: Sequence[str],
                 users: Sequence[str]):
        """
        :param 'AclRuleAction' action: Tailscale ACL rules are "default deny".
               So the only possible value for an ACL
               rule is `accept`.
        """
        AclRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            ports=ports,
            users=users,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: 'AclRuleAction',
             ports: Sequence[str],
             users: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("ports", ports)
        _setter("users", users)

    @property
    @pulumi.getter
    def action(self) -> 'AclRuleAction':
        """
        Tailscale ACL rules are "default deny".
        So the only possible value for an ACL
        rule is `accept`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def users(self) -> Sequence[str]:
        return pulumi.get(self, "users")


@pulumi.output_type
class AuthKey(dict):
    def __init__(__self__, *,
                 expires: str,
                 key: str,
                 created: Optional[str] = None):
        AuthKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expires=expires,
            key=key,
            created=created,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expires: str,
             key: str,
             created: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expires", expires)
        _setter("key", key)
        if created is not None:
            _setter("created", created)

    @property
    @pulumi.getter
    def expires(self) -> str:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")


@pulumi.output_type
class ClientConnectivity(dict):
    def __init__(__self__, *,
                 client_supports: 'outputs.ClientSupports',
                 derp: str,
                 endpoints: str,
                 latency: Any,
                 mapping_varies_by_dest_ip: bool):
        ClientConnectivity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_supports=client_supports,
            derp=derp,
            endpoints=endpoints,
            latency=latency,
            mapping_varies_by_dest_ip=mapping_varies_by_dest_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_supports: 'outputs.ClientSupports',
             derp: str,
             endpoints: str,
             latency: Any,
             mapping_varies_by_dest_ip: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_supports", client_supports)
        _setter("derp", derp)
        _setter("endpoints", endpoints)
        _setter("latency", latency)
        _setter("mapping_varies_by_dest_ip", mapping_varies_by_dest_ip)

    @property
    @pulumi.getter(name="clientSupports")
    def client_supports(self) -> 'outputs.ClientSupports':
        return pulumi.get(self, "client_supports")

    @property
    @pulumi.getter
    def derp(self) -> str:
        return pulumi.get(self, "derp")

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def latency(self) -> Any:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="mappingVariesByDestIP")
    def mapping_varies_by_dest_ip(self) -> bool:
        return pulumi.get(self, "mapping_varies_by_dest_ip")


@pulumi.output_type
class ClientSupports(dict):
    def __init__(__self__, *,
                 hair_pinning: bool,
                 ipv6: bool,
                 pcp: bool,
                 pmp: bool,
                 udp: bool,
                 upnp: bool):
        ClientSupports._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hair_pinning=hair_pinning,
            ipv6=ipv6,
            pcp=pcp,
            pmp=pmp,
            udp=udp,
            upnp=upnp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hair_pinning: bool,
             ipv6: bool,
             pcp: bool,
             pmp: bool,
             udp: bool,
             upnp: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hair_pinning", hair_pinning)
        _setter("ipv6", ipv6)
        _setter("pcp", pcp)
        _setter("pmp", pmp)
        _setter("udp", udp)
        _setter("upnp", upnp)

    @property
    @pulumi.getter(name="hairPinning")
    def hair_pinning(self) -> bool:
        return pulumi.get(self, "hair_pinning")

    @property
    @pulumi.getter
    def ipv6(self) -> bool:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def pcp(self) -> bool:
        return pulumi.get(self, "pcp")

    @property
    @pulumi.getter
    def pmp(self) -> bool:
        return pulumi.get(self, "pmp")

    @property
    @pulumi.getter
    def udp(self) -> bool:
        return pulumi.get(self, "udp")

    @property
    @pulumi.getter
    def upnp(self) -> bool:
        return pulumi.get(self, "upnp")


@pulumi.output_type
class CreateKey(dict):
    def __init__(__self__, *,
                 ephemeral: bool,
                 preauthorized: bool,
                 reusable: bool,
                 tags: Sequence[str]):
        CreateKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ephemeral=ephemeral,
            preauthorized=preauthorized,
            reusable=reusable,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ephemeral: bool,
             preauthorized: bool,
             reusable: bool,
             tags: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("ephemeral", ephemeral)
        _setter("preauthorized", preauthorized)
        _setter("reusable", reusable)
        _setter("tags", tags)

    @property
    @pulumi.getter
    def ephemeral(self) -> bool:
        return pulumi.get(self, "ephemeral")

    @property
    @pulumi.getter
    def preauthorized(self) -> bool:
        return pulumi.get(self, "preauthorized")

    @property
    @pulumi.getter
    def reusable(self) -> bool:
        return pulumi.get(self, "reusable")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class Device(dict):
    def __init__(__self__, *,
                 addresses: Sequence[str],
                 advertised_routes: Sequence[str],
                 authorized: bool,
                 blocks_incoming_connections: bool,
                 client_connectivity: 'outputs.ClientConnectivity',
                 client_version: str,
                 created: str,
                 enabled_routes: Sequence[str],
                 expires: str,
                 hostname: str,
                 id: str,
                 is_external: bool,
                 key_expiry_disabled: bool,
                 last_seen: str,
                 machine_key: str,
                 name: str,
                 node_key: str,
                 os: str,
                 update_available: bool,
                 user: str):
        Device._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            addresses=addresses,
            advertised_routes=advertised_routes,
            authorized=authorized,
            blocks_incoming_connections=blocks_incoming_connections,
            client_connectivity=client_connectivity,
            client_version=client_version,
            created=created,
            enabled_routes=enabled_routes,
            expires=expires,
            hostname=hostname,
            id=id,
            is_external=is_external,
            key_expiry_disabled=key_expiry_disabled,
            last_seen=last_seen,
            machine_key=machine_key,
            name=name,
            node_key=node_key,
            os=os,
            update_available=update_available,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             addresses: Sequence[str],
             advertised_routes: Sequence[str],
             authorized: bool,
             blocks_incoming_connections: bool,
             client_connectivity: 'outputs.ClientConnectivity',
             client_version: str,
             created: str,
             enabled_routes: Sequence[str],
             expires: str,
             hostname: str,
             id: str,
             is_external: bool,
             key_expiry_disabled: bool,
             last_seen: str,
             machine_key: str,
             name: str,
             node_key: str,
             os: str,
             update_available: bool,
             user: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("addresses", addresses)
        _setter("advertised_routes", advertised_routes)
        _setter("authorized", authorized)
        _setter("blocks_incoming_connections", blocks_incoming_connections)
        _setter("client_connectivity", client_connectivity)
        _setter("client_version", client_version)
        _setter("created", created)
        _setter("enabled_routes", enabled_routes)
        _setter("expires", expires)
        _setter("hostname", hostname)
        _setter("id", id)
        _setter("is_external", is_external)
        _setter("key_expiry_disabled", key_expiry_disabled)
        _setter("last_seen", last_seen)
        _setter("machine_key", machine_key)
        _setter("name", name)
        _setter("node_key", node_key)
        _setter("os", os)
        _setter("update_available", update_available)
        _setter("user", user)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="advertisedRoutes")
    def advertised_routes(self) -> Sequence[str]:
        return pulumi.get(self, "advertised_routes")

    @property
    @pulumi.getter
    def authorized(self) -> bool:
        return pulumi.get(self, "authorized")

    @property
    @pulumi.getter(name="blocksIncomingConnections")
    def blocks_incoming_connections(self) -> bool:
        return pulumi.get(self, "blocks_incoming_connections")

    @property
    @pulumi.getter(name="clientConnectivity")
    def client_connectivity(self) -> 'outputs.ClientConnectivity':
        return pulumi.get(self, "client_connectivity")

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> str:
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="enabledRoutes")
    def enabled_routes(self) -> Sequence[str]:
        return pulumi.get(self, "enabled_routes")

    @property
    @pulumi.getter
    def expires(self) -> str:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> bool:
        return pulumi.get(self, "is_external")

    @property
    @pulumi.getter(name="keyExpiryDisabled")
    def key_expiry_disabled(self) -> bool:
        return pulumi.get(self, "key_expiry_disabled")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> str:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="machineKey")
    def machine_key(self) -> str:
        return pulumi.get(self, "machine_key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeKey")
    def node_key(self) -> str:
        return pulumi.get(self, "node_key")

    @property
    @pulumi.getter
    def os(self) -> str:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="updateAvailable")
    def update_available(self) -> bool:
        return pulumi.get(self, "update_available")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class DeviceKeyCapabilities(dict):
    def __init__(__self__, *,
                 create: 'outputs.CreateKey'):
        DeviceKeyCapabilities._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create=create,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create: 'outputs.CreateKey',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("create", create)

    @property
    @pulumi.getter
    def create(self) -> 'outputs.CreateKey':
        return pulumi.get(self, "create")


@pulumi.output_type
class DnsSearchPaths(dict):
    def __init__(__self__, *,
                 search_paths: Sequence[str]):
        DnsSearchPaths._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            search_paths=search_paths,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             search_paths: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("search_paths", search_paths)

    @property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Sequence[str]:
        return pulumi.get(self, "search_paths")


@pulumi.output_type
class KeyCapabilities(dict):
    def __init__(__self__, *,
                 devices: 'outputs.DeviceKeyCapabilities'):
        KeyCapabilities._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            devices=devices,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             devices: 'outputs.DeviceKeyCapabilities',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("devices", devices)

    @property
    @pulumi.getter
    def devices(self) -> 'outputs.DeviceKeyCapabilities':
        return pulumi.get(self, "devices")


@pulumi.output_type
class ListDevicesProperties(dict):
    def __init__(__self__, *,
                 devices: Sequence['outputs.Device']):
        ListDevicesProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            devices=devices,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             devices: Sequence['outputs.Device'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("devices", devices)

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.Device']:
        return pulumi.get(self, "devices")


@pulumi.output_type
class NameServers(dict):
    def __init__(__self__, *,
                 dns: Sequence[str],
                 magic_dns: bool):
        NameServers._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns=dns,
            magic_dns=magic_dns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns: Sequence[str],
             magic_dns: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dns", dns)
        _setter("magic_dns", magic_dns)

    @property
    @pulumi.getter
    def dns(self) -> Sequence[str]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="magicDNS")
    def magic_dns(self) -> bool:
        return pulumi.get(self, "magic_dns")


@pulumi.output_type
class NameServersPreference(dict):
    def __init__(__self__, *,
                 magic_dns: bool):
        NameServersPreference._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            magic_dns=magic_dns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             magic_dns: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("magic_dns", magic_dns)

    @property
    @pulumi.getter(name="magicDNS")
    def magic_dns(self) -> bool:
        return pulumi.get(self, "magic_dns")


@pulumi.output_type
class NodeAttrs(dict):
    def __init__(__self__, *,
                 attr: Sequence[str],
                 target: Sequence[str]):
        NodeAttrs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attr=attr,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attr: Sequence[str],
             target: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attr", attr)
        _setter("target", target)

    @property
    @pulumi.getter
    def attr(self) -> Sequence[str]:
        return pulumi.get(self, "attr")

    @property
    @pulumi.getter
    def target(self) -> Sequence[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class SshRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkPeriod":
            suggest = "check_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: 'SshRuleAction',
                 check_period: str,
                 dst: Sequence[str],
                 src: Sequence[str],
                 users: Sequence[str]):
        SshRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            check_period=check_period,
            dst=dst,
            src=src,
            users=users,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: 'SshRuleAction',
             check_period: str,
             dst: Sequence[str],
             src: Sequence[str],
             users: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("check_period", check_period)
        _setter("dst", dst)
        _setter("src", src)
        _setter("users", users)

    @property
    @pulumi.getter
    def action(self) -> 'SshRuleAction':
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="checkPeriod")
    def check_period(self) -> str:
        return pulumi.get(self, "check_period")

    @property
    @pulumi.getter
    def dst(self) -> Sequence[str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def src(self) -> Sequence[str]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def users(self) -> Sequence[str]:
        return pulumi.get(self, "users")


