# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AclRule',
    'AuthKey',
    'ClientConnectivity',
    'ClientSupports',
    'CreateKey',
    'Device',
    'DeviceKeyCapabilities',
    'KeyCapabilities',
    'NodeAttrs',
    'SshRule',
]

@pulumi.output_type
class AclRule(dict):
    def __init__(__self__, *,
                 action: 'AclRuleAction',
                 ports: Sequence[builtins.str],
                 users: Sequence[builtins.str]):
        """
        :param 'AclRuleAction' action: Tailscale ACL rules are "default deny".
               So the only possible value for an ACL
               rule is `accept`.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def action(self) -> 'AclRuleAction':
        """
        Tailscale ACL rules are "default deny".
        So the only possible value for an ACL
        rule is `accept`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def users(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "users")


@pulumi.output_type
class AuthKey(dict):
    def __init__(__self__, *,
                 expires: builtins.str,
                 key: builtins.str,
                 created: Optional[builtins.str] = None):
        pulumi.set(__self__, "expires", expires)
        pulumi.set(__self__, "key", key)
        if created is not None:
            pulumi.set(__self__, "created", created)

    @property
    @pulumi.getter
    def expires(self) -> builtins.str:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def created(self) -> Optional[builtins.str]:
        return pulumi.get(self, "created")


@pulumi.output_type
class ClientConnectivity(dict):
    def __init__(__self__, *,
                 client_supports: 'outputs.ClientSupports',
                 derp: builtins.str,
                 endpoints: builtins.str,
                 latency: Any,
                 mapping_varies_by_dest_ip: builtins.bool):
        pulumi.set(__self__, "client_supports", client_supports)
        pulumi.set(__self__, "derp", derp)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "mapping_varies_by_dest_ip", mapping_varies_by_dest_ip)

    @property
    @pulumi.getter(name="clientSupports")
    def client_supports(self) -> 'outputs.ClientSupports':
        return pulumi.get(self, "client_supports")

    @property
    @pulumi.getter
    def derp(self) -> builtins.str:
        return pulumi.get(self, "derp")

    @property
    @pulumi.getter
    def endpoints(self) -> builtins.str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def latency(self) -> Any:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="mappingVariesByDestIP")
    def mapping_varies_by_dest_ip(self) -> builtins.bool:
        return pulumi.get(self, "mapping_varies_by_dest_ip")


@pulumi.output_type
class ClientSupports(dict):
    def __init__(__self__, *,
                 hair_pinning: builtins.bool,
                 ipv6: builtins.bool,
                 pcp: builtins.bool,
                 pmp: builtins.bool,
                 udp: builtins.bool,
                 upnp: builtins.bool):
        pulumi.set(__self__, "hair_pinning", hair_pinning)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "pcp", pcp)
        pulumi.set(__self__, "pmp", pmp)
        pulumi.set(__self__, "udp", udp)
        pulumi.set(__self__, "upnp", upnp)

    @property
    @pulumi.getter(name="hairPinning")
    def hair_pinning(self) -> builtins.bool:
        return pulumi.get(self, "hair_pinning")

    @property
    @pulumi.getter
    def ipv6(self) -> builtins.bool:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def pcp(self) -> builtins.bool:
        return pulumi.get(self, "pcp")

    @property
    @pulumi.getter
    def pmp(self) -> builtins.bool:
        return pulumi.get(self, "pmp")

    @property
    @pulumi.getter
    def udp(self) -> builtins.bool:
        return pulumi.get(self, "udp")

    @property
    @pulumi.getter
    def upnp(self) -> builtins.bool:
        return pulumi.get(self, "upnp")


@pulumi.output_type
class CreateKey(dict):
    def __init__(__self__, *,
                 ephemeral: builtins.bool,
                 preauthorized: builtins.bool,
                 reusable: builtins.bool,
                 tags: Sequence[builtins.str]):
        pulumi.set(__self__, "ephemeral", ephemeral)
        pulumi.set(__self__, "preauthorized", preauthorized)
        pulumi.set(__self__, "reusable", reusable)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def ephemeral(self) -> builtins.bool:
        return pulumi.get(self, "ephemeral")

    @property
    @pulumi.getter
    def preauthorized(self) -> builtins.bool:
        return pulumi.get(self, "preauthorized")

    @property
    @pulumi.getter
    def reusable(self) -> builtins.bool:
        return pulumi.get(self, "reusable")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class Device(dict):
    def __init__(__self__, *,
                 addresses: Sequence[builtins.str],
                 advertised_routes: Sequence[builtins.str],
                 authorized: builtins.bool,
                 blocks_incoming_connections: builtins.bool,
                 client_connectivity: 'outputs.ClientConnectivity',
                 client_version: builtins.str,
                 created: builtins.str,
                 enabled_routes: Sequence[builtins.str],
                 expires: builtins.str,
                 hostname: builtins.str,
                 id: builtins.str,
                 is_external: builtins.bool,
                 key_expiry_disabled: builtins.bool,
                 last_seen: builtins.str,
                 machine_key: builtins.str,
                 name: builtins.str,
                 node_key: builtins.str,
                 os: builtins.str,
                 update_available: builtins.bool,
                 user: builtins.str):
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "advertised_routes", advertised_routes)
        pulumi.set(__self__, "authorized", authorized)
        pulumi.set(__self__, "blocks_incoming_connections", blocks_incoming_connections)
        pulumi.set(__self__, "client_connectivity", client_connectivity)
        pulumi.set(__self__, "client_version", client_version)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "enabled_routes", enabled_routes)
        pulumi.set(__self__, "expires", expires)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_external", is_external)
        pulumi.set(__self__, "key_expiry_disabled", key_expiry_disabled)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "machine_key", machine_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_key", node_key)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "update_available", update_available)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="advertisedRoutes")
    def advertised_routes(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "advertised_routes")

    @property
    @pulumi.getter
    def authorized(self) -> builtins.bool:
        return pulumi.get(self, "authorized")

    @property
    @pulumi.getter(name="blocksIncomingConnections")
    def blocks_incoming_connections(self) -> builtins.bool:
        return pulumi.get(self, "blocks_incoming_connections")

    @property
    @pulumi.getter(name="clientConnectivity")
    def client_connectivity(self) -> 'outputs.ClientConnectivity':
        return pulumi.get(self, "client_connectivity")

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> builtins.str:
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="enabledRoutes")
    def enabled_routes(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "enabled_routes")

    @property
    @pulumi.getter
    def expires(self) -> builtins.str:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def hostname(self) -> builtins.str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> builtins.bool:
        return pulumi.get(self, "is_external")

    @property
    @pulumi.getter(name="keyExpiryDisabled")
    def key_expiry_disabled(self) -> builtins.bool:
        return pulumi.get(self, "key_expiry_disabled")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> builtins.str:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="machineKey")
    def machine_key(self) -> builtins.str:
        return pulumi.get(self, "machine_key")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeKey")
    def node_key(self) -> builtins.str:
        return pulumi.get(self, "node_key")

    @property
    @pulumi.getter
    def os(self) -> builtins.str:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="updateAvailable")
    def update_available(self) -> builtins.bool:
        return pulumi.get(self, "update_available")

    @property
    @pulumi.getter
    def user(self) -> builtins.str:
        return pulumi.get(self, "user")


@pulumi.output_type
class DeviceKeyCapabilities(dict):
    def __init__(__self__, *,
                 create: 'outputs.CreateKey'):
        pulumi.set(__self__, "create", create)

    @property
    @pulumi.getter
    def create(self) -> 'outputs.CreateKey':
        return pulumi.get(self, "create")


@pulumi.output_type
class KeyCapabilities(dict):
    def __init__(__self__, *,
                 devices: 'outputs.DeviceKeyCapabilities'):
        pulumi.set(__self__, "devices", devices)

    @property
    @pulumi.getter
    def devices(self) -> 'outputs.DeviceKeyCapabilities':
        return pulumi.get(self, "devices")


@pulumi.output_type
class NodeAttrs(dict):
    def __init__(__self__, *,
                 attr: Sequence[builtins.str],
                 target: Sequence[builtins.str]):
        pulumi.set(__self__, "attr", attr)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def attr(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "attr")

    @property
    @pulumi.getter
    def target(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class SshRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkPeriod":
            suggest = "check_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: 'SshRuleAction',
                 check_period: builtins.str,
                 dst: Sequence[builtins.str],
                 src: Sequence[builtins.str],
                 users: Sequence[builtins.str]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "check_period", check_period)
        pulumi.set(__self__, "dst", dst)
        pulumi.set(__self__, "src", src)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def action(self) -> 'SshRuleAction':
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="checkPeriod")
    def check_period(self) -> builtins.str:
        return pulumi.get(self, "check_period")

    @property
    @pulumi.getter
    def dst(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def src(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def users(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "users")


