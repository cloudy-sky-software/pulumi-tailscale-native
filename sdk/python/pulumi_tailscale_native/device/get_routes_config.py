# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetRoutesConfigResult',
    'AwaitableGetRoutesConfigResult',
    'get_routes_config',
    'get_routes_config_output',
]

@pulumi.output_type
class GetRoutesConfigResult:
    def __init__(__self__, advertised_routes=None, enabled_routes=None):
        if advertised_routes and not isinstance(advertised_routes, list):
            raise TypeError("Expected argument 'advertised_routes' to be a list")
        pulumi.set(__self__, "advertised_routes", advertised_routes)
        if enabled_routes and not isinstance(enabled_routes, list):
            raise TypeError("Expected argument 'enabled_routes' to be a list")
        pulumi.set(__self__, "enabled_routes", enabled_routes)

    @_builtins.property
    @pulumi.getter(name="advertisedRoutes")
    def advertised_routes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "advertised_routes")

    @_builtins.property
    @pulumi.getter(name="enabledRoutes")
    def enabled_routes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "enabled_routes")


class AwaitableGetRoutesConfigResult(GetRoutesConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoutesConfigResult(
            advertised_routes=self.advertised_routes,
            enabled_routes=self.enabled_routes)


def get_routes_config(id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoutesConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tailscale-native:device:getRoutesConfig', __args__, opts=opts, typ=GetRoutesConfigResult).value

    return AwaitableGetRoutesConfigResult(
        advertised_routes=pulumi.get(__ret__, 'advertised_routes'),
        enabled_routes=pulumi.get(__ret__, 'enabled_routes'))
def get_routes_config_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRoutesConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('tailscale-native:device:getRoutesConfig', __args__, opts=opts, typ=GetRoutesConfigResult)
    return __ret__.apply(lambda __response__: GetRoutesConfigResult(
        advertised_routes=pulumi.get(__response__, 'advertised_routes'),
        enabled_routes=pulumi.get(__response__, 'enabled_routes')))
