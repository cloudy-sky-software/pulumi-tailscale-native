# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ClientConnectivity',
    'ClientSupports',
    'Device',
    'DeviceRoutes',
]

@pulumi.output_type
class ClientConnectivity(dict):
    def __init__(__self__, *,
                 client_supports: 'outputs.ClientSupports',
                 derp: str,
                 endpoints: str,
                 latency: Any,
                 mapping_varies_by_dest_ip: bool):
        ClientConnectivity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_supports=client_supports,
            derp=derp,
            endpoints=endpoints,
            latency=latency,
            mapping_varies_by_dest_ip=mapping_varies_by_dest_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_supports: 'outputs.ClientSupports',
             derp: str,
             endpoints: str,
             latency: Any,
             mapping_varies_by_dest_ip: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_supports", client_supports)
        _setter("derp", derp)
        _setter("endpoints", endpoints)
        _setter("latency", latency)
        _setter("mapping_varies_by_dest_ip", mapping_varies_by_dest_ip)

    @property
    @pulumi.getter(name="clientSupports")
    def client_supports(self) -> 'outputs.ClientSupports':
        return pulumi.get(self, "client_supports")

    @property
    @pulumi.getter
    def derp(self) -> str:
        return pulumi.get(self, "derp")

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def latency(self) -> Any:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="mappingVariesByDestIP")
    def mapping_varies_by_dest_ip(self) -> bool:
        return pulumi.get(self, "mapping_varies_by_dest_ip")


@pulumi.output_type
class ClientSupports(dict):
    def __init__(__self__, *,
                 hair_pinning: bool,
                 ipv6: bool,
                 pcp: bool,
                 pmp: bool,
                 udp: bool,
                 upnp: bool):
        ClientSupports._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hair_pinning=hair_pinning,
            ipv6=ipv6,
            pcp=pcp,
            pmp=pmp,
            udp=udp,
            upnp=upnp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hair_pinning: bool,
             ipv6: bool,
             pcp: bool,
             pmp: bool,
             udp: bool,
             upnp: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hair_pinning", hair_pinning)
        _setter("ipv6", ipv6)
        _setter("pcp", pcp)
        _setter("pmp", pmp)
        _setter("udp", udp)
        _setter("upnp", upnp)

    @property
    @pulumi.getter(name="hairPinning")
    def hair_pinning(self) -> bool:
        return pulumi.get(self, "hair_pinning")

    @property
    @pulumi.getter
    def ipv6(self) -> bool:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def pcp(self) -> bool:
        return pulumi.get(self, "pcp")

    @property
    @pulumi.getter
    def pmp(self) -> bool:
        return pulumi.get(self, "pmp")

    @property
    @pulumi.getter
    def udp(self) -> bool:
        return pulumi.get(self, "udp")

    @property
    @pulumi.getter
    def upnp(self) -> bool:
        return pulumi.get(self, "upnp")


@pulumi.output_type
class Device(dict):
    def __init__(__self__, *,
                 addresses: Sequence[str],
                 advertised_routes: Sequence[str],
                 authorized: bool,
                 blocks_incoming_connections: bool,
                 client_connectivity: 'outputs.ClientConnectivity',
                 client_version: str,
                 created: str,
                 enabled_routes: Sequence[str],
                 expires: str,
                 hostname: str,
                 id: str,
                 is_external: bool,
                 key_expiry_disabled: bool,
                 last_seen: str,
                 machine_key: str,
                 name: str,
                 node_key: str,
                 os: str,
                 update_available: bool,
                 user: str):
        Device._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            addresses=addresses,
            advertised_routes=advertised_routes,
            authorized=authorized,
            blocks_incoming_connections=blocks_incoming_connections,
            client_connectivity=client_connectivity,
            client_version=client_version,
            created=created,
            enabled_routes=enabled_routes,
            expires=expires,
            hostname=hostname,
            id=id,
            is_external=is_external,
            key_expiry_disabled=key_expiry_disabled,
            last_seen=last_seen,
            machine_key=machine_key,
            name=name,
            node_key=node_key,
            os=os,
            update_available=update_available,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             addresses: Sequence[str],
             advertised_routes: Sequence[str],
             authorized: bool,
             blocks_incoming_connections: bool,
             client_connectivity: 'outputs.ClientConnectivity',
             client_version: str,
             created: str,
             enabled_routes: Sequence[str],
             expires: str,
             hostname: str,
             id: str,
             is_external: bool,
             key_expiry_disabled: bool,
             last_seen: str,
             machine_key: str,
             name: str,
             node_key: str,
             os: str,
             update_available: bool,
             user: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("addresses", addresses)
        _setter("advertised_routes", advertised_routes)
        _setter("authorized", authorized)
        _setter("blocks_incoming_connections", blocks_incoming_connections)
        _setter("client_connectivity", client_connectivity)
        _setter("client_version", client_version)
        _setter("created", created)
        _setter("enabled_routes", enabled_routes)
        _setter("expires", expires)
        _setter("hostname", hostname)
        _setter("id", id)
        _setter("is_external", is_external)
        _setter("key_expiry_disabled", key_expiry_disabled)
        _setter("last_seen", last_seen)
        _setter("machine_key", machine_key)
        _setter("name", name)
        _setter("node_key", node_key)
        _setter("os", os)
        _setter("update_available", update_available)
        _setter("user", user)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="advertisedRoutes")
    def advertised_routes(self) -> Sequence[str]:
        return pulumi.get(self, "advertised_routes")

    @property
    @pulumi.getter
    def authorized(self) -> bool:
        return pulumi.get(self, "authorized")

    @property
    @pulumi.getter(name="blocksIncomingConnections")
    def blocks_incoming_connections(self) -> bool:
        return pulumi.get(self, "blocks_incoming_connections")

    @property
    @pulumi.getter(name="clientConnectivity")
    def client_connectivity(self) -> 'outputs.ClientConnectivity':
        return pulumi.get(self, "client_connectivity")

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> str:
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="enabledRoutes")
    def enabled_routes(self) -> Sequence[str]:
        return pulumi.get(self, "enabled_routes")

    @property
    @pulumi.getter
    def expires(self) -> str:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> bool:
        return pulumi.get(self, "is_external")

    @property
    @pulumi.getter(name="keyExpiryDisabled")
    def key_expiry_disabled(self) -> bool:
        return pulumi.get(self, "key_expiry_disabled")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> str:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="machineKey")
    def machine_key(self) -> str:
        return pulumi.get(self, "machine_key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeKey")
    def node_key(self) -> str:
        return pulumi.get(self, "node_key")

    @property
    @pulumi.getter
    def os(self) -> str:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="updateAvailable")
    def update_available(self) -> bool:
        return pulumi.get(self, "update_available")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class DeviceRoutes(dict):
    def __init__(__self__, *,
                 advertised_routes: Sequence[str],
                 enabled_routes: Sequence[str]):
        DeviceRoutes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advertised_routes=advertised_routes,
            enabled_routes=enabled_routes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advertised_routes: Sequence[str],
             enabled_routes: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("advertised_routes", advertised_routes)
        _setter("enabled_routes", enabled_routes)

    @property
    @pulumi.getter(name="advertisedRoutes")
    def advertised_routes(self) -> Sequence[str]:
        return pulumi.get(self, "advertised_routes")

    @property
    @pulumi.getter(name="enabledRoutes")
    def enabled_routes(self) -> Sequence[str]:
        return pulumi.get(self, "enabled_routes")


