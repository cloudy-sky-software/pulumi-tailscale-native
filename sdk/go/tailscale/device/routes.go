// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package device

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Routes struct {
	pulumi.CustomResourceState

	Routes pulumi.StringArrayOutput `pulumi:"routes"`
}

// NewRoutes registers a new resource with the given unique name, arguments, and options.
func NewRoutes(ctx *pulumi.Context,
	name string, args *RoutesArgs, opts ...pulumi.ResourceOption) (*Routes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Routes == nil {
		return nil, errors.New("invalid value for required argument 'Routes'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Routes
	err := ctx.RegisterResource("tailscale-native:device:Routes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutes gets an existing Routes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutesState, opts ...pulumi.ResourceOption) (*Routes, error) {
	var resource Routes
	err := ctx.ReadResource("tailscale-native:device:Routes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Routes resources.
type routesState struct {
}

type RoutesState struct {
}

func (RoutesState) ElementType() reflect.Type {
	return reflect.TypeOf((*routesState)(nil)).Elem()
}

type routesArgs struct {
	Id     *string  `pulumi:"id"`
	Routes []string `pulumi:"routes"`
}

// The set of arguments for constructing a Routes resource.
type RoutesArgs struct {
	Id     pulumi.StringPtrInput
	Routes pulumi.StringArrayInput
}

func (RoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routesArgs)(nil)).Elem()
}

type RoutesInput interface {
	pulumi.Input

	ToRoutesOutput() RoutesOutput
	ToRoutesOutputWithContext(ctx context.Context) RoutesOutput
}

func (*Routes) ElementType() reflect.Type {
	return reflect.TypeOf((**Routes)(nil)).Elem()
}

func (i *Routes) ToRoutesOutput() RoutesOutput {
	return i.ToRoutesOutputWithContext(context.Background())
}

func (i *Routes) ToRoutesOutputWithContext(ctx context.Context) RoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutesOutput)
}

type RoutesOutput struct{ *pulumi.OutputState }

func (RoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Routes)(nil)).Elem()
}

func (o RoutesOutput) ToRoutesOutput() RoutesOutput {
	return o
}

func (o RoutesOutput) ToRoutesOutputWithContext(ctx context.Context) RoutesOutput {
	return o
}

func (o RoutesOutput) Routes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Routes) pulumi.StringArrayOutput { return v.Routes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutesInput)(nil)).Elem(), &Routes{})
	pulumi.RegisterOutputType(RoutesOutput{})
}
