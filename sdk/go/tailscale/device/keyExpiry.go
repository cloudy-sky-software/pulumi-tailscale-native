// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package device

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KeyExpiry struct {
	pulumi.CustomResourceState

	KeyExpiryDisabled pulumi.BoolOutput `pulumi:"keyExpiryDisabled"`
}

// NewKeyExpiry registers a new resource with the given unique name, arguments, and options.
func NewKeyExpiry(ctx *pulumi.Context,
	name string, args *KeyExpiryArgs, opts ...pulumi.ResourceOption) (*KeyExpiry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyExpiryDisabled == nil {
		return nil, errors.New("invalid value for required argument 'KeyExpiryDisabled'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource KeyExpiry
	err := ctx.RegisterResource("tailscale:device:KeyExpiry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyExpiry gets an existing KeyExpiry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyExpiry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyExpiryState, opts ...pulumi.ResourceOption) (*KeyExpiry, error) {
	var resource KeyExpiry
	err := ctx.ReadResource("tailscale:device:KeyExpiry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyExpiry resources.
type keyExpiryState struct {
}

type KeyExpiryState struct {
}

func (KeyExpiryState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyExpiryState)(nil)).Elem()
}

type keyExpiryArgs struct {
	Id                *string `pulumi:"id"`
	KeyExpiryDisabled bool    `pulumi:"keyExpiryDisabled"`
}

// The set of arguments for constructing a KeyExpiry resource.
type KeyExpiryArgs struct {
	Id                pulumi.StringPtrInput
	KeyExpiryDisabled pulumi.BoolInput
}

func (KeyExpiryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyExpiryArgs)(nil)).Elem()
}

type KeyExpiryInput interface {
	pulumi.Input

	ToKeyExpiryOutput() KeyExpiryOutput
	ToKeyExpiryOutputWithContext(ctx context.Context) KeyExpiryOutput
}

func (*KeyExpiry) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyExpiry)(nil)).Elem()
}

func (i *KeyExpiry) ToKeyExpiryOutput() KeyExpiryOutput {
	return i.ToKeyExpiryOutputWithContext(context.Background())
}

func (i *KeyExpiry) ToKeyExpiryOutputWithContext(ctx context.Context) KeyExpiryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyExpiryOutput)
}

type KeyExpiryOutput struct{ *pulumi.OutputState }

func (KeyExpiryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyExpiry)(nil)).Elem()
}

func (o KeyExpiryOutput) ToKeyExpiryOutput() KeyExpiryOutput {
	return o
}

func (o KeyExpiryOutput) ToKeyExpiryOutputWithContext(ctx context.Context) KeyExpiryOutput {
	return o
}

func (o KeyExpiryOutput) KeyExpiryDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *KeyExpiry) pulumi.BoolOutput { return v.KeyExpiryDisabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyExpiryInput)(nil)).Elem(), &KeyExpiry{})
	pulumi.RegisterOutputType(KeyExpiryOutput{})
}
