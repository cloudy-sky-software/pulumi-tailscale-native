// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tailnet

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-tailscale-native/sdk/go/tailscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NameServersConfig struct {
	pulumi.CustomResourceState

	Dns      pulumi.StringArrayOutput `pulumi:"dns"`
	MagicDNS pulumi.BoolOutput        `pulumi:"magicDNS"`
}

// NewNameServersConfig registers a new resource with the given unique name, arguments, and options.
func NewNameServersConfig(ctx *pulumi.Context,
	name string, args *NameServersConfigArgs, opts ...pulumi.ResourceOption) (*NameServersConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dns == nil {
		return nil, errors.New("invalid value for required argument 'Dns'")
	}
	if args.MagicDNS == nil {
		return nil, errors.New("invalid value for required argument 'MagicDNS'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NameServersConfig
	err := ctx.RegisterResource("tailscale-native:tailnet:NameServersConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNameServersConfig gets an existing NameServersConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNameServersConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NameServersConfigState, opts ...pulumi.ResourceOption) (*NameServersConfig, error) {
	var resource NameServersConfig
	err := ctx.ReadResource("tailscale-native:tailnet:NameServersConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NameServersConfig resources.
type nameServersConfigState struct {
}

type NameServersConfigState struct {
}

func (NameServersConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*nameServersConfigState)(nil)).Elem()
}

type nameServersConfigArgs struct {
	Dns      []string `pulumi:"dns"`
	MagicDNS bool     `pulumi:"magicDNS"`
	// For paid plans, your domain is your tailnet. For solo plans, the tailnet is the email you signed up with. So `alice@gmail.com` has the tailnet `alice@gmail.com` since `@gmail.com` is a shared email host. Alternatively, you can specify the value "-" to refer to the default tailnet of the authenticated user making the API call.
	Tailnet *string `pulumi:"tailnet"`
}

// The set of arguments for constructing a NameServersConfig resource.
type NameServersConfigArgs struct {
	Dns      pulumi.StringArrayInput
	MagicDNS pulumi.BoolInput
	// For paid plans, your domain is your tailnet. For solo plans, the tailnet is the email you signed up with. So `alice@gmail.com` has the tailnet `alice@gmail.com` since `@gmail.com` is a shared email host. Alternatively, you can specify the value "-" to refer to the default tailnet of the authenticated user making the API call.
	Tailnet pulumi.StringPtrInput
}

func (NameServersConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nameServersConfigArgs)(nil)).Elem()
}

type NameServersConfigInput interface {
	pulumi.Input

	ToNameServersConfigOutput() NameServersConfigOutput
	ToNameServersConfigOutputWithContext(ctx context.Context) NameServersConfigOutput
}

func (*NameServersConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**NameServersConfig)(nil)).Elem()
}

func (i *NameServersConfig) ToNameServersConfigOutput() NameServersConfigOutput {
	return i.ToNameServersConfigOutputWithContext(context.Background())
}

func (i *NameServersConfig) ToNameServersConfigOutputWithContext(ctx context.Context) NameServersConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameServersConfigOutput)
}

type NameServersConfigOutput struct{ *pulumi.OutputState }

func (NameServersConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NameServersConfig)(nil)).Elem()
}

func (o NameServersConfigOutput) ToNameServersConfigOutput() NameServersConfigOutput {
	return o
}

func (o NameServersConfigOutput) ToNameServersConfigOutputWithContext(ctx context.Context) NameServersConfigOutput {
	return o
}

func (o NameServersConfigOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NameServersConfig) pulumi.StringArrayOutput { return v.Dns }).(pulumi.StringArrayOutput)
}

func (o NameServersConfigOutput) MagicDNS() pulumi.BoolOutput {
	return o.ApplyT(func(v *NameServersConfig) pulumi.BoolOutput { return v.MagicDNS }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NameServersConfigInput)(nil)).Elem(), &NameServersConfig{})
	pulumi.RegisterOutputType(NameServersConfigOutput{})
}
