// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tailnet

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-tailscale-native/sdk/go/tailscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DNSPreferencesConfig struct {
	pulumi.CustomResourceState

	MagicDNS pulumi.BoolOutput `pulumi:"magicDNS"`
}

// NewDNSPreferencesConfig registers a new resource with the given unique name, arguments, and options.
func NewDNSPreferencesConfig(ctx *pulumi.Context,
	name string, args *DNSPreferencesConfigArgs, opts ...pulumi.ResourceOption) (*DNSPreferencesConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MagicDNS == nil {
		return nil, errors.New("invalid value for required argument 'MagicDNS'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DNSPreferencesConfig
	err := ctx.RegisterResource("tailscale-native:tailnet:DNSPreferencesConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNSPreferencesConfig gets an existing DNSPreferencesConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSPreferencesConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSPreferencesConfigState, opts ...pulumi.ResourceOption) (*DNSPreferencesConfig, error) {
	var resource DNSPreferencesConfig
	err := ctx.ReadResource("tailscale-native:tailnet:DNSPreferencesConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNSPreferencesConfig resources.
type dnspreferencesConfigState struct {
}

type DNSPreferencesConfigState struct {
}

func (DNSPreferencesConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnspreferencesConfigState)(nil)).Elem()
}

type dnspreferencesConfigArgs struct {
	MagicDNS bool `pulumi:"magicDNS"`
	// For paid plans, your domain is your tailnet. For solo plans, the tailnet is the email you signed up with. So `alice@gmail.com` has the tailnet `alice@gmail.com` since `@gmail.com` is a shared email host. Alternatively, you can specify the value "-" to refer to the default tailnet of the authenticated user making the API call.
	Tailnet *string `pulumi:"tailnet"`
}

// The set of arguments for constructing a DNSPreferencesConfig resource.
type DNSPreferencesConfigArgs struct {
	MagicDNS pulumi.BoolInput
	// For paid plans, your domain is your tailnet. For solo plans, the tailnet is the email you signed up with. So `alice@gmail.com` has the tailnet `alice@gmail.com` since `@gmail.com` is a shared email host. Alternatively, you can specify the value "-" to refer to the default tailnet of the authenticated user making the API call.
	Tailnet pulumi.StringPtrInput
}

func (DNSPreferencesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnspreferencesConfigArgs)(nil)).Elem()
}

type DNSPreferencesConfigInput interface {
	pulumi.Input

	ToDNSPreferencesConfigOutput() DNSPreferencesConfigOutput
	ToDNSPreferencesConfigOutputWithContext(ctx context.Context) DNSPreferencesConfigOutput
}

func (*DNSPreferencesConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSPreferencesConfig)(nil)).Elem()
}

func (i *DNSPreferencesConfig) ToDNSPreferencesConfigOutput() DNSPreferencesConfigOutput {
	return i.ToDNSPreferencesConfigOutputWithContext(context.Background())
}

func (i *DNSPreferencesConfig) ToDNSPreferencesConfigOutputWithContext(ctx context.Context) DNSPreferencesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSPreferencesConfigOutput)
}

type DNSPreferencesConfigOutput struct{ *pulumi.OutputState }

func (DNSPreferencesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSPreferencesConfig)(nil)).Elem()
}

func (o DNSPreferencesConfigOutput) ToDNSPreferencesConfigOutput() DNSPreferencesConfigOutput {
	return o
}

func (o DNSPreferencesConfigOutput) ToDNSPreferencesConfigOutputWithContext(ctx context.Context) DNSPreferencesConfigOutput {
	return o
}

func (o DNSPreferencesConfigOutput) MagicDNS() pulumi.BoolOutput {
	return o.ApplyT(func(v *DNSPreferencesConfig) pulumi.BoolOutput { return v.MagicDNS }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DNSPreferencesConfigInput)(nil)).Elem(), &DNSPreferencesConfig{})
	pulumi.RegisterOutputType(DNSPreferencesConfigOutput{})
}
