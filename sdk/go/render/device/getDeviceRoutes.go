// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package device

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetDeviceRoutes(ctx *pulumi.Context, args *GetDeviceRoutesArgs, opts ...pulumi.InvokeOption) (*GetDeviceRoutesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetDeviceRoutesResult
	err := ctx.Invoke("tailscale:device:getDeviceRoutes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetDeviceRoutesArgs struct {
	Id string `pulumi:"id"`
}

type GetDeviceRoutesResult struct {
	Items DeviceRoutes `pulumi:"items"`
}

func GetDeviceRoutesOutput(ctx *pulumi.Context, args GetDeviceRoutesOutputArgs, opts ...pulumi.InvokeOption) GetDeviceRoutesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDeviceRoutesResult, error) {
			args := v.(GetDeviceRoutesArgs)
			r, err := GetDeviceRoutes(ctx, &args, opts...)
			var s GetDeviceRoutesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDeviceRoutesResultOutput)
}

type GetDeviceRoutesOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetDeviceRoutesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceRoutesArgs)(nil)).Elem()
}

type GetDeviceRoutesResultOutput struct{ *pulumi.OutputState }

func (GetDeviceRoutesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceRoutesResult)(nil)).Elem()
}

func (o GetDeviceRoutesResultOutput) ToGetDeviceRoutesResultOutput() GetDeviceRoutesResultOutput {
	return o
}

func (o GetDeviceRoutesResultOutput) ToGetDeviceRoutesResultOutputWithContext(ctx context.Context) GetDeviceRoutesResultOutput {
	return o
}

func (o GetDeviceRoutesResultOutput) Items() DeviceRoutesOutput {
	return o.ApplyT(func(v GetDeviceRoutesResult) DeviceRoutes { return v.Items }).(DeviceRoutesOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDeviceRoutesResultOutput{})
}
