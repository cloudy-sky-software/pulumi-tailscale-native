// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NameServers extends pulumi.CustomResource {
    /**
     * Get an existing NameServers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): NameServers {
        return new NameServers(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tailscale:tailnet:NameServers';

    /**
     * Returns true if the given object is an instance of NameServers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NameServers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NameServers.__pulumiType;
    }

    public readonly dns!: pulumi.Output<string[]>;
    public readonly magicDNS!: pulumi.Output<boolean | undefined>;

    /**
     * Create a NameServers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NameServersArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.dns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dns'");
            }
            if ((!args || args.magicDNS === undefined) && !opts.urn) {
                throw new Error("Missing required property 'magicDNS'");
            }
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["magicDNS"] = args ? args.magicDNS : undefined;
            resourceInputs["tailnet"] = args ? args.tailnet : undefined;
        } else {
            resourceInputs["dns"] = undefined /*out*/;
            resourceInputs["magicDNS"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NameServers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a NameServers resource.
 */
export interface NameServersArgs {
    dns: pulumi.Input<pulumi.Input<string>[]>;
    magicDNS: pulumi.Input<boolean>;
    tailnet?: pulumi.Input<string>;
}
