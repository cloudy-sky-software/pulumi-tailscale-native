// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tailscale:tailnet:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    public readonly acls!: pulumi.Output<outputs.tailnet.AclRule[]>;
    public readonly autoApprovers!: pulumi.Output<any>;
    public readonly groups!: pulumi.Output<any>;
    public readonly hosts!: pulumi.Output<any>;
    public readonly nodeAttrs!: pulumi.Output<outputs.tailnet.NodeAttrs[]>;
    public readonly ssh!: pulumi.Output<outputs.tailnet.SshRule[]>;
    public readonly tagOwners!: pulumi.Output<any>;
    public readonly tests!: pulumi.Output<string>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.acls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acls'");
            }
            if ((!args || args.autoApprovers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoApprovers'");
            }
            if ((!args || args.groups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groups'");
            }
            if ((!args || args.hosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.nodeAttrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeAttrs'");
            }
            if ((!args || args.ssh === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ssh'");
            }
            if ((!args || args.tagOwners === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagOwners'");
            }
            if ((!args || args.tests === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tests'");
            }
            resourceInputs["acls"] = args ? args.acls : undefined;
            resourceInputs["autoApprovers"] = args ? args.autoApprovers : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["nodeAttrs"] = args ? args.nodeAttrs : undefined;
            resourceInputs["ssh"] = args ? args.ssh : undefined;
            resourceInputs["tagOwners"] = args ? args.tagOwners : undefined;
            resourceInputs["tailnet"] = args ? args.tailnet : undefined;
            resourceInputs["tests"] = args ? args.tests : undefined;
        } else {
            resourceInputs["acls"] = undefined /*out*/;
            resourceInputs["autoApprovers"] = undefined /*out*/;
            resourceInputs["groups"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
            resourceInputs["nodeAttrs"] = undefined /*out*/;
            resourceInputs["ssh"] = undefined /*out*/;
            resourceInputs["tagOwners"] = undefined /*out*/;
            resourceInputs["tests"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    acls: pulumi.Input<pulumi.Input<inputs.tailnet.AclRuleArgs>[]>;
    autoApprovers: any;
    groups: any;
    hosts: any;
    nodeAttrs: pulumi.Input<pulumi.Input<inputs.tailnet.NodeAttrsArgs>[]>;
    ssh: pulumi.Input<pulumi.Input<inputs.tailnet.SshRuleArgs>[]>;
    tagOwners: any;
    tailnet?: pulumi.Input<string>;
    tests: pulumi.Input<string>;
}
