// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { DNSPreferencesConfigArgs } from "./dnspreferencesConfig";
export type DNSPreferencesConfig = import("./dnspreferencesConfig").DNSPreferencesConfig;
export const DNSPreferencesConfig: typeof import("./dnspreferencesConfig").DNSPreferencesConfig = null as any;
utilities.lazyLoad(exports, ["DNSPreferencesConfig"], () => require("./dnspreferencesConfig"));

export { GetAclArgs, GetAclOutputArgs } from "./getAcl";
export const getAcl: typeof import("./getAcl").getAcl = null as any;
export const getAclOutput: typeof import("./getAcl").getAclOutput = null as any;
utilities.lazyLoad(exports, ["getAcl","getAclOutput"], () => require("./getAcl"));

export { GetDNSPreferencesConfigArgs, GetDNSPreferencesConfigOutputArgs } from "./getDNSPreferencesConfig";
export const getDNSPreferencesConfig: typeof import("./getDNSPreferencesConfig").getDNSPreferencesConfig = null as any;
export const getDNSPreferencesConfigOutput: typeof import("./getDNSPreferencesConfig").getDNSPreferencesConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDNSPreferencesConfig","getDNSPreferencesConfigOutput"], () => require("./getDNSPreferencesConfig"));

export { GetKeyArgs, GetKeyOutputArgs } from "./getKey";
export const getKey: typeof import("./getKey").getKey = null as any;
export const getKeyOutput: typeof import("./getKey").getKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKey","getKeyOutput"], () => require("./getKey"));

export { GetNameServersConfigArgs, GetNameServersConfigOutputArgs } from "./getNameServersConfig";
export const getNameServersConfig: typeof import("./getNameServersConfig").getNameServersConfig = null as any;
export const getNameServersConfigOutput: typeof import("./getNameServersConfig").getNameServersConfigOutput = null as any;
utilities.lazyLoad(exports, ["getNameServersConfig","getNameServersConfigOutput"], () => require("./getNameServersConfig"));

export { KeyArgs } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));

export { ListDevicesArgs, ListDevicesOutputArgs } from "./listDevices";
export const listDevices: typeof import("./listDevices").listDevices = null as any;
export const listDevicesOutput: typeof import("./listDevices").listDevicesOutput = null as any;
utilities.lazyLoad(exports, ["listDevices","listDevicesOutput"], () => require("./listDevices"));

export { ListKeysArgs, ListKeysResult, ListKeysOutputArgs } from "./listKeys";
export const listKeys: typeof import("./listKeys").listKeys = null as any;
export const listKeysOutput: typeof import("./listKeys").listKeysOutput = null as any;
utilities.lazyLoad(exports, ["listKeys","listKeysOutput"], () => require("./listKeys"));

export { ListSearchPathsArgs, ListSearchPathsOutputArgs } from "./listSearchPaths";
export const listSearchPaths: typeof import("./listSearchPaths").listSearchPaths = null as any;
export const listSearchPathsOutput: typeof import("./listSearchPaths").listSearchPathsOutput = null as any;
utilities.lazyLoad(exports, ["listSearchPaths","listSearchPathsOutput"], () => require("./listSearchPaths"));

export { NameServersConfigArgs } from "./nameServersConfig";
export type NameServersConfig = import("./nameServersConfig").NameServersConfig;
export const NameServersConfig: typeof import("./nameServersConfig").NameServersConfig = null as any;
utilities.lazyLoad(exports, ["NameServersConfig"], () => require("./nameServersConfig"));

export { ReplaceSearchPathsArgs } from "./replaceSearchPaths";
export type ReplaceSearchPaths = import("./replaceSearchPaths").ReplaceSearchPaths;
export const ReplaceSearchPaths: typeof import("./replaceSearchPaths").ReplaceSearchPaths = null as any;
utilities.lazyLoad(exports, ["ReplaceSearchPaths"], () => require("./replaceSearchPaths"));


// Export enums:
export * from "../types/enums/tailnet";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tailscale-native:tailnet:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "tailscale-native:tailnet:DNSPreferencesConfig":
                return new DNSPreferencesConfig(name, <any>undefined, { urn })
            case "tailscale-native:tailnet:Key":
                return new Key(name, <any>undefined, { urn })
            case "tailscale-native:tailnet:NameServersConfig":
                return new NameServersConfig(name, <any>undefined, { urn })
            case "tailscale-native:tailnet:ReplaceSearchPaths":
                return new ReplaceSearchPaths(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tailscale-native", "tailnet", _module)
